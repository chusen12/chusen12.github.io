<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chusen&#39;s blog</title>
  
  <subtitle>学如逆水行舟 不进则退</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.huxueru.xin/"/>
  <updated>2018-03-05T05:01:46.558Z</updated>
  <id>http://www.huxueru.xin/</id>
  
  <author>
    <name>楚森</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大文件的分割与合并</title>
    <link href="http://www.huxueru.xin/2018/03/05/%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E5%88%86%E5%89%B2%E4%B8%8E%E5%90%88%E5%B9%B6/"/>
    <id>http://www.huxueru.xin/2018/03/05/大文件的分割与合并/</id>
    <published>2018-03-05T04:31:26.000Z</published>
    <updated>2018-03-05T05:01:46.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1.整体思路"></a>1.整体思路</h3><p>&emsp;首先我们会经常遇到一些大的文件的传输问题，对于大的文件传输，整体传输会非常的慢 效率很低，所以我们可以考虑 采用分解的思想，把大文件分解成若干个小文件，然后再对整体进行合并。如果进行跨机器传输的话，我们可以开启若干个线程 每个线程去分解文件，然后通过socket网络传输发送socket服务端 socket服务端也可以采用多个线程去接受 然后合并。</p><h3 id="2-整体代码"><a href="#2-整体代码" class="headerlink" title="2.整体代码"></a>2.整体代码</h3><h4 id="1-文件工具类代码"><a href="#1-文件工具类代码" class="headerlink" title="1.文件工具类代码"></a>1.文件工具类代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergePartFiles</span><span class="params">(String dirpath, String partFileSuffix, String mergeFileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ArrayList&lt;File&gt; partFiles = getDirFiles(dirpath, partFileSuffix);<span class="comment">//7 27</span></div><div class="line">        Collections.sort(partFiles, <span class="keyword">new</span> FileComparator());</div><div class="line">        <span class="keyword">int</span> partFileSize = (<span class="keyword">int</span>) partFiles.get(<span class="number">0</span>).length();</div><div class="line">        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(mergeFileName, <span class="string">"rw"</span>);</div><div class="line"><span class="comment">//        System.out.println("文件长度"+partFileSize * (partFiles.size() - 1) + partFiles.get(partFiles.size() - 1).length());</span></div><div class="line">        randomAccessFile.setLength(partFileSize * (partFiles.size() - <span class="number">1</span>) + partFiles.get(partFiles.size() - <span class="number">1</span>).length());</div><div class="line">        randomAccessFile.close();</div><div class="line">        <span class="keyword">for</span> (File partFile : partFiles) &#123;</div><div class="line">            System.out.println(partFile.getName() + partFile.length());</div><div class="line">        &#125;</div><div class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(partFiles.size(), partFiles.size() * <span class="number">3</span>, <span class="number">1</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(partFiles.size() * <span class="number">2</span>));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partFiles.size(); i++) &#123;</div><div class="line">            threadPool.execute(<span class="keyword">new</span> MergeRunnable(i * partFileSize, mergeFileName, partFiles.get(i)));</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"成功了！！！"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获得目录下的文件</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dirpath</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> suffix</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> ArrayList&lt;File&gt; <span class="title">getDirFiles</span><span class="params">(String dirpath, <span class="keyword">final</span> String suffix)</span> </span>&#123;</div><div class="line">        File path = <span class="keyword">new</span> File(dirpath);</div><div class="line">        File[] fileArr = path.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</div><div class="line">                String lowerName = name.toLowerCase();</div><div class="line">                String filesuffix = suffix.toLowerCase();</div><div class="line">                <span class="keyword">if</span> (lowerName.endsWith(filesuffix)) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        ArrayList&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;File&gt;();</div><div class="line">        <span class="keyword">for</span> (File file : fileArr) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</div><div class="line">                files.add(file);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> files;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">splitBySize</span><span class="params">(String fileName, <span class="keyword">int</span> count)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        List&lt;String&gt; parts = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        File file = <span class="keyword">new</span> File(fileName);</div><div class="line"><span class="comment">//        int byteSize = (int) Math.ceil(file.length() / (double)count);</span></div><div class="line">        List&lt;Integer&gt; bytes = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> countLen = (count+<span class="string">""</span>).length();</div><div class="line">        testLen((<span class="keyword">int</span>) file.length(), count, bytes);</div><div class="line">        ThreadPoolExecutor threadpool = <span class="keyword">new</span> ThreadPoolExecutor(count, count * <span class="number">3</span>, <span class="number">1</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(count * <span class="number">2</span>));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            String partFileName = file.getName() + <span class="string">"_"</span> + leftPad(i+<span class="string">""</span>,countLen,<span class="string">'0'</span>) + <span class="string">".part"</span>;</div><div class="line">            threadpool.execute(<span class="keyword">new</span> SplitRunnable(bytes.get(i), i * bytes.get(i == <span class="number">0</span> ? <span class="number">0</span> : i - <span class="number">1</span>), partFileName, file));</div><div class="line">            parts.add(partFileName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> parts;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">leftPad</span><span class="params">(String str, <span class="keyword">int</span> countLen, <span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (str.length() &gt; countLen) &#123;</div><div class="line">            <span class="keyword">return</span> str;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[countLen];</div><div class="line">        Arrays.fill(chs, c);</div><div class="line">        <span class="keyword">char</span>[] src = str.toCharArray();</div><div class="line">        System.arraycopy(src, <span class="number">0</span>, chs, countLen - src.length, src.length);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">new</span> FileUtils().mergePartFiles(<span class="string">"D:\\test\\frj\\"</span>, <span class="string">".mp4"</span>, <span class="string">"D:\\test\\frj\\merge.mp4"</span>); <span class="comment">//1,626,409,091</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/***</span></div><div class="line"><span class="comment">     * 构建文件大小集合</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> len</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLen</span><span class="params">(Integer len, <span class="keyword">int</span> count, List&lt;Integer&gt; arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = len / count;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (len % count == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (j &lt; count) &#123;</div><div class="line">                arr.add(i);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt; count - <span class="number">1</span>) &#123;</div><div class="line">                sum += i;</div><div class="line">                arr.add(i);</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            arr.add(len - sum);</div><div class="line">        &#125;</div><div class="line">        System.out.println(arr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据文件名称 比较文件</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FileComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">File</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(File o1, File o2)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> o1.getName().compareToIgnoreCase(o2.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-文件分解线程主要代码"><a href="#2-文件分解线程主要代码" class="headerlink" title="2.文件分解线程主要代码"></a>2.文件分解线程主要代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> byteSize;</div><div class="line">    String partFileName;</div><div class="line">    File originFile;</div><div class="line">    <span class="keyword">int</span> startPos;</div><div class="line">    Socket socket;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SplitRunnable</span><span class="params">(<span class="keyword">int</span> byteSize, <span class="keyword">int</span> startPos,String partFileName,File originFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.startPos = startPos;</div><div class="line">        <span class="keyword">this</span>.byteSize = byteSize;</div><div class="line">        <span class="keyword">this</span>.partFileName = partFileName;</div><div class="line">        <span class="keyword">this</span>.originFile = originFile;</div><div class="line"><span class="comment">//        socket = new Socket("localhost",8088);</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RandomAccessFile rfile;</div><div class="line">        OutputStream os;</div><div class="line"><span class="comment">//        DataOutputStream dos;</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//            dos = new DataOutputStream(socket.getOutputStream());</span></div><div class="line">            rfile = <span class="keyword">new</span> RandomAccessFile(originFile,<span class="string">"r"</span>);</div><div class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[byteSize];</div><div class="line">            rfile.seek(startPos);</div><div class="line">            <span class="keyword">int</span> s = rfile.read(b);</div><div class="line">            File file = <span class="keyword">new</span> File(partFileName);</div><div class="line"><span class="comment">//            写到本地的时候用</span></div><div class="line">            os = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/test/frj/"</span> + partFileName);</div><div class="line"><span class="comment">//            dos.writeUTF(file.getName());</span></div><div class="line"><span class="comment">//            dos.flush();</span></div><div class="line"><span class="comment">//            dos.writeLong(file.length());</span></div><div class="line"><span class="comment">//            dos.flush();</span></div><div class="line"><span class="comment">//            dos.write(b,0,s);</span></div><div class="line"><span class="comment">//            dos.flush();</span></div><div class="line"><span class="comment">//            dos.close();</span></div><div class="line">            os.write(b,<span class="number">0</span>,s);</div><div class="line">            os.flush();</div><div class="line">            os.close();</div><div class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-文件合并线程主要代码"><a href="#3-文件合并线程主要代码" class="headerlink" title="3.文件合并线程主要代码"></a>3.文件合并线程主要代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> startPos;</div><div class="line">    String mergeFileName;</div><div class="line">    File partFile;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MergeRunnable</span><span class="params">(<span class="keyword">int</span> startPos, String mergeFileName, File partFile)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.startPos = startPos;</div><div class="line">        <span class="keyword">this</span>.mergeFileName = mergeFileName;</div><div class="line">        <span class="keyword">this</span>.partFile = partFile;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RandomAccessFile rfile;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            rfile = <span class="keyword">new</span> RandomAccessFile(mergeFileName,<span class="string">"rw"</span>);</div><div class="line">            rfile.seek(startPos);</div><div class="line">            FileInputStream fs = <span class="keyword">new</span> FileInputStream(partFile);</div><div class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[fs.available()];</div><div class="line">            fs.read(b);</div><div class="line">            fs.close();</div><div class="line">            rfile.write(b);</div><div class="line">            rfile.close();</div><div class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-整体思路&quot;&gt;&lt;a href=&quot;#1-整体思路&quot; class=&quot;headerlink&quot; title=&quot;1.整体思路&quot;&gt;&lt;/a&gt;1.整体思路&lt;/h3&gt;&lt;p&gt;&amp;emsp;首先我们会经常遇到一些大的文件的传输问题，对于大的文件传输，整体传输会非常的慢 效率很低，所以我
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.huxueru.xin/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机使用NAT模式配置静态ip</title>
    <link href="http://www.huxueru.xin/2017/12/05/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%BF%E7%94%A8NAT%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
    <id>http://www.huxueru.xin/2017/12/05/虚拟机使用NAT模式配置静态ip/</id>
    <published>2017-12-05T01:09:01.000Z</published>
    <updated>2017-12-05T05:03:03.823Z</updated>
    
    <content type="html"><![CDATA[<p>##1 基本配置 ##<br><code>`之所以使用NAT模式而不使用桥接模式 是因为桥接模式非常依赖网络环境 ip容易改变 这是非常不好的 话不多说 直接贴图吧！</code></p><ol><li>List item</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1 基本配置 ##&lt;br&gt;&lt;code&gt;`之所以使用NAT模式而不使用桥接模式 是因为桥接模式非常依赖网络环境 ip容易改变 这是非常不好的 话不多说 直接贴图吧！&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.huxueru.xin/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="http://www.huxueru.xin/2017/11/06/%E5%89%8D%E8%A8%80/"/>
    <id>http://www.huxueru.xin/2017/11/06/前言/</id>
    <published>2017-11-06T07:48:36.000Z</published>
    <updated>2017-11-08T13:04:19.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>   </p><p>hello,欢迎来到我的博客，首先关于具体的搭建过程我就不详细介绍了，网上有很多的教程，这里就不去重复写了，关于这个博客，断断续续的搭了两三天，之前我一直是在word文档上记录平时的错误，但是呢这有一定的局限性，一是不能达到分享的目的，二是word文档没有一个好的归档排版，因此搭建博客，同时非常感谢网上的热心人士开源与交流，关于我的博客，我想记录一些平时学习和以后工作遇到的问题，旨在给和我遇到一样问题的同学一些思路，同时我本人也不是一个大牛，然后我们可以一起学习和交流，欢迎各位给我留言。</p><p></p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>   如果各位发现文章有错误和更好的建议 欢迎联系我。</p><ul><li>微信:fivemu-cs</li><li>邮箱:chusen12@163.com</li><li>QQ:2676840121</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;博客搭建&quot;&gt;&lt;a href=&quot;#博客搭建&quot; class=&quot;headerlink&quot; title=&quot;博客搭建&quot;&gt;&lt;/a&gt;博客搭建&lt;/h2&gt;&lt;p&gt;   &lt;/p&gt;&lt;p&gt;hello,欢迎来到我的博客，首先关于具体的搭建过程我就不详细介绍了，网上有很多的教程，这里就不去重复写
      
    
    </summary>
    
    
      <category term="杂记" scheme="http://www.huxueru.xin/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
